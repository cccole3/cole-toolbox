{"version":3,"sources":["logo.svg","Navigation/Brand.tsx","Navigation/Navigation.tsx","Pages/Home/Home.tsx","Pages/Project1/Project1.tsx","Pages/Project2/Project2.tsx","App.tsx","Theme/Theme.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Brand","Navbar","href","alt","src","logo","width","height","className","NavigationBar","this","props","bg","variant","Nav","Link","React","Component","Home","Project1","Project2","App","Container","fluid","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,iMCIpC,SAASC,IACd,OACE,kBAACC,EAAA,EAAOD,MAAR,CAAcE,KAAK,KACjB,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPC,UAAU,6BACT,IAPL,cCKG,IAAMC,EAAb,uKACY,IAAD,EACiBC,KAAKC,MAArBC,EADD,EACCA,GAAIC,EADL,EACKA,QAEZ,OACE,kBAACZ,EAAA,EAAD,CAAQW,GAAIA,EAAIC,QAASA,GACvB,kBAACb,EAAD,MACA,kBAACc,EAAA,EAAD,CAAKN,UAAU,WACb,kBAACM,EAAA,EAAIC,KAAL,CAAUb,KAAK,KAAf,QACA,kBAACY,EAAA,EAAIC,KAAL,CAAUb,KAAK,aAAf,aACA,kBAACY,EAAA,EAAIC,KAAL,CAAUb,KAAK,aAAf,mBAVV,GAAmCc,IAAMC,W,eCTlC,SAASC,IACd,OAAO,oCCDF,SAASC,IACd,OAAO,wCCDF,SAASC,IACd,OAAO,wCCUF,SAASC,IACd,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAAC,IAAD,KACE,gCAEE,kBAAC,EAAD,CAAeX,GClBJ,ODkBeC,QClBf,UDoBb,kBAACS,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,aACV,kBAACJ,EAAD,OAEF,kBAAC,IAAD,CAAOI,KAAK,KACV,kBAACN,EAAD,WElBMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACX,EAAD,OAEFY,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84851d28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.967ef51e.svg\";","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport logo from '../logo.svg'\r\n\r\nexport function Brand() {\r\n  return (\r\n    <Navbar.Brand href=\"/\">\r\n      <img\r\n        alt=\"\"\r\n        src={logo}\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n      />{' '}\r\n      Chris Cole\r\n    </Navbar.Brand>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { Brand } from './Brand'\r\nimport { ThemeType } from '../Theme/Theme'\r\n\r\nexport interface Props {\r\n  bg: ThemeType\r\n  variant: ThemeType\r\n}\r\n\r\nexport class NavigationBar extends React.Component<Props, object> {\r\n  render() {\r\n    const { bg, variant } = this.props\r\n\r\n    return (\r\n      <Navbar bg={bg} variant={variant}>\r\n        <Brand />\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/\">Home</Nav.Link>\r\n          <Nav.Link href=\"/project1\">Project 1</Nav.Link>\r\n          <Nav.Link href=\"/project2\">Project 2</Nav.Link>\r\n        </Nav>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport function Home() {\r\n  return <h1>Home</h1>\r\n}\r\n","import React from 'react'\r\n\r\nexport function Project1() {\r\n  return <h1>Project1</h1>\r\n}\r\n","import React from 'react'\r\n\r\nexport function Project2() {\r\n  return <h1>Project2</h1>\r\n}\r\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\n// import { Header } from './Header/Header'\nimport { NavigationBar } from './Navigation/Navigation'\nimport { theme } from './Theme/Theme'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Home } from './Pages/Home/Home'\nimport { Project1 } from './Pages/Project1/Project1'\nimport { Project2 } from './Pages/Project2/Project2'\n\n// import ButtonsShowcase from './showcases/Buttons'\n// import ToastsShowcase from './showcases/Toasts'\n\nexport function App() {\n  return (\n    <Container fluid={true}>\n      <Router>\n        <header>\n          {/* <Header /> */}\n          <NavigationBar bg={theme} variant={theme} />\n        </header>\n        <Container fluid={true}>\n          <Switch>\n            <Route path=\"/project1\">\n              <Project1 />\n            </Route>\n            <Route path=\"/project2\">\n              <Project2 />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </Container>\n  )\n}\n","export type ThemeType = 'light' | 'dark' | undefined\r\nexport const theme = 'dark'\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { App } from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}