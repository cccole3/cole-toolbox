{"version":3,"sources":["logo.svg","Navigation/Brand.tsx","Navigation/Navigation.tsx","Pages/Home/Home.tsx","Pages/Project1/Project1.tsx","Pages/Project2/Project2.tsx","App.tsx","Theme/Theme.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Brand","Navbar","href","alt","src","logo","width","height","className","NavigationBar","this","props","bg","variant","Nav","Link","React","Component","Home","Project1","Project2","App","Container","fluid","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,iMCIpC,SAASC,IACd,OACE,kBAACC,EAAA,EAAOD,MAAR,CAAcE,KAAK,KACjB,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPC,UAAU,6BACT,IAPL,cCKG,IAAMC,EAAb,uKACY,IAAD,EACiBC,KAAKC,MAArBC,EADD,EACCA,GAAIC,EADL,EACKA,QAEZ,OACE,kBAACZ,EAAA,EAAD,CAAQW,GAAIA,EAAIC,QAASA,GACvB,kBAACb,EAAD,MACA,kBAACc,EAAA,EAAD,CAAKN,UAAU,WACb,kBAACM,EAAA,EAAIC,KAAL,CAAUb,KAAK,KAAf,QACA,kBAACY,EAAA,EAAIC,KAAL,CAAUb,KAAK,aAAf,aACA,kBAACY,EAAA,EAAIC,KAAL,CAAUb,KAAK,aAAf,mBAVV,GAAmCc,IAAMC,W,eCTlC,SAASC,IACd,OAAO,oCCDF,SAASC,IACd,OAAO,wCCDF,SAASC,IACd,OAAO,wCCUF,SAASC,IACd,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAAC,IAAD,KACE,gCAEE,kBAAC,EAAD,CAAeX,GClBJ,ODkBeC,QClBf,UDoBb,kBAACS,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,aACV,kBAACJ,EAAD,OAEF,kBAAC,IAAD,CAAOI,KAAK,KACV,kBAACN,EAAD,WElBMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACX,EAAD,OAEFY,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84851d28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.967ef51e.svg\";","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport logo from '../logo.svg'\r\n\r\nexport function Brand() {\r\n  return (\r\n    <Navbar.Brand href=\"/\">\r\n      <img\r\n        alt=\"\"\r\n        src={logo}\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n      />{' '}\r\n      Chris Cole\r\n    </Navbar.Brand>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { Brand } from './Brand'\r\nimport { ThemeType } from '../Theme/Theme'\r\n\r\nexport interface Props {\r\n  bg: ThemeType\r\n  variant: ThemeType\r\n}\r\n\r\nexport class NavigationBar extends React.Component<Props, object> {\r\n  render() {\r\n    const { bg, variant } = this.props\r\n\r\n    return (\r\n      <Navbar bg={bg} variant={variant}>\r\n        <Brand />\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/\">Home</Nav.Link>\r\n          <Nav.Link href=\"/project1\">Project 1</Nav.Link>\r\n          <Nav.Link href=\"/project2\">Project 2</Nav.Link>\r\n        </Nav>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport function Home() {\r\n  return <h1>Home</h1>\r\n}\r\n","import React from 'react'\r\n\r\nexport function Project1() {\r\n  return <h1>Project1</h1>\r\n}\r\n","import React from 'react'\r\n\r\nexport function Project2() {\r\n  return <h1>Project2</h1>\r\n}\r\n","import React from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\n// import { Header } from './Header/Header'\r\nimport { NavigationBar } from './Navigation/Navigation'\r\nimport { theme } from './Theme/Theme'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport { Home } from './Pages/Home/Home'\r\nimport { Project1 } from './Pages/Project1/Project1'\r\nimport { Project2 } from './Pages/Project2/Project2'\r\n\r\n// import ButtonsShowcase from './showcases/Buttons'\r\n// import ToastsShowcase from './showcases/Toasts'\r\n\r\nexport function App() {\r\n  return (\r\n    <Container fluid={true}>\r\n      <Router>\r\n        <header>\r\n          {/* <Header /> */}\r\n          <NavigationBar bg={theme} variant={theme} />\r\n        </header>\r\n        <Container fluid={true}>\r\n          <Switch>\r\n            <Route path=\"/project1\">\r\n              <Project1 />\r\n            </Route>\r\n            <Route path=\"/project2\">\r\n              <Project2 />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n      </Router>\r\n    </Container>\r\n  )\r\n}\r\n","export type ThemeType = 'light' | 'dark' | undefined\r\nexport const theme = 'dark'\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { App } from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}